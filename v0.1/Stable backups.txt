// Defining constants and giving the cards values
const cards = [
  "A♥", "2♥", "3♥", "4♥", "5♥", "6♥", "7♥", "8♥", "9♥", "10♥", "J♥", "Q♥", "K♥",
  "A♠", "2♠", "3♠", "4♠", "5♠", "6♠", "7♠", "8♠", "9♠", "10♠", "J♠", "Q♠", "K♠",
  "A♦", "2♦", "3♦", "4♦", "5♦", "6♦", "7♦", "8♦", "9♦", "10♦", "J♦", "Q♦", "K♦",
  "A♣", "2♣", "3♣", "4♣", "5♣", "6♣", "7♣", "8♣", "9♣", "10♣", "J♣", "Q♣", "K♣"
];
const deck = document.querySelector('.deck');
const cardElements = document.querySelectorAll('.card');
let currentGame = 0;
let totalScore = 0;
let suitScores = {
"♥": 0,
"♠": 0,
"♦": 0,
"♣": 0
};
let gameStarted = false;
let cardsClicked = 0;
let flippedCards = 0;
let gameScores = {};
let currentRowIndex = 0;
let lastClickedCardIndex = -1;
let selectedRows = [];

// Shuffle the cards using the Fisher-Yates algorithm
function shuffleDeck() {
for (let i = cards.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [cards[i], cards[j]] = [cards[j], cards[i]];
}
}

// Assign each card a value and point value
function dealCards() {
cards.forEach((card, index) => {
  const cardElement = cardElements[index];
  cardElement.dataset.value = card;
  cardElement.classList.add("card-hidden");
  let points;
  if (card.startsWith("A")) {
    points = 11;
  } else if (card.startsWith("K") || card.startsWith("Q") || card.startsWith("J")) {
    points = 10;
  } else {
    points = parseInt(card);
  }
  cardElement.dataset.points = points;

  // Set the suit class for each card element
  if (card.includes("♥")) {
    cardElement.classList.add("heart");
  } else if (card.includes("♠")) {
    cardElement.classList.add("spade");
  } else if (card.includes("♦")) {
    cardElement.classList.add("diamond");
  } else if (card.includes("♣")) {
    cardElement.classList.add("club");
  }
});
} 

//Function for displaying messages
function displayMessage(message) {
  const messageBox = document.getElementById("message-box");
  messageBox.textContent = message;
}

//Function to check if a row has been selected
function isRowSelected(row) {
  return selectedRows.includes(row);
}

// Function for updating scoreboard
function updateScoreboard() {
  // Update total score
  totalScore = Object.values(suitScores).reduce((acc, val) => acc + val, 0);
  document.getElementById("score-box").textContent = `Total score: ${totalScore}`;

  // Sort suitScores object by values in descending order
  let sortedScores = Object.entries(suitScores).sort((a, b) => b[1] - a[1]);

  // Get the suit score elements
  const heartScoreElement = document.getElementById("♥-score");
  const spadeScoreElement = document.getElementById("♠-score");
  const diamondScoreElement = document.getElementById("♦-score");
  const clubScoreElement = document.getElementById("♣-score");

  // Update the scores of the suit score elements
  heartScoreElement.textContent = `Hearts ♥: ${suitScores["♥"]}`;
  spadeScoreElement.textContent = `Spades ♠: ${suitScores["♠"]}`;
  diamondScoreElement.textContent = `Diamonds ♦: ${suitScores["♦"]}`;
  clubScoreElement.textContent = `Clubs ♣: ${suitScores["♣"]}`;

  // Reorder the suit score elements based on the sorted scores
  let scoreboard = document.querySelector(".scoreboard");
  sortedScores.forEach((suitScore) => {
    let suit = suitScore[0];
    if (suit === "♥") {
      scoreboard.appendChild(heartScoreElement);
    } else if (suit === "♠") {
      scoreboard.appendChild(spadeScoreElement);
    } else if (suit === "♦") {
      scoreboard.appendChild(diamondScoreElement);
    } else if (suit === "♣") {
      scoreboard.appendChild(clubScoreElement);
    }
  });

  // Update game score element and apply color coding
  const gameNumber = `game-${currentGame}`;
  const gameScoreElement = document.getElementById(gameNumber);
  const gameScore = `Game ${currentGame}: ${totalScore}`.replace('-', ' ');
  gameScoreElement.textContent = gameScore;
  if (totalScore > 57) {
    gameScoreElement.classList.add("score-above-threshold");
    gameScoreElement.classList.remove("score-below-threshold");
  } else {
    gameScoreElement.classList.add("score-below-threshold");
    gameScoreElement.classList.remove("score-above-threshold");
  }
}
    
function startGame() {
  // Increment currentGame to start a new game
  if (currentGame === 0) {
    shuffleDeck();
  }
  currentGame++;
  startButton.disabled = true;
  resetButton.disabled = false;
  dealCards();
  gameStarted = true;

  // Reset scores for the current game
  suitScores = {
    "♥": 0,
    "♦": 0,
    "♠": 0,
    "♣": 0
  };

  // Reset currentRowIndex and selectedRows for the new game
  currentRowIndex = 0;
  selectedRows = [];
}

// Function for reseting cards
function resetCards() {
cardElements.forEach((cardElement) => {
  if (!cardElement.classList.contains("card-hidden")) {
    cardElement.classList.add("card-hidden");
    cardElement.classList.remove("card-flipped");
    cardElement.textContent = "";
  }
});
startButton.disabled = false; // enable start button
}

//Function for displaying error messages
function displayError(message) {
  const errorBox = document.querySelector("#error-box");
  if (errorBox) {
    errorBox.remove();
  }
  const container = document.querySelector(".content-container");
  const error = document.createElement("div");
  error.classList.add("message-box", "error-box");
  error.setAttribute("id", "error-box");
  const errorText = document.createElement("p");
  errorText.textContent = message;
  error.appendChild(errorText);
  container.appendChild(error);

  setTimeout(() => {
    const errorBox = document.querySelector("#error-box");
    if (errorBox) {
      errorBox.remove();
    }
  }, 3000);
}

function flipCard(cardElement) {
  if (!gameStarted) {
    return;
  }
  const row = cardElement.parentElement.dataset.row;
  if (isRowSelected(row)) {
    displayError(`You've already selected a card from row ${row}!`);
    return;
  }
  if (currentRowIndex !== parseInt(row) - 1) {
    displayError(`Please select a card from column ${currentRowIndex + 1}`);
    return;
  }
  cardElement.classList.toggle("card-hidden");
  if (!cardElement.classList.contains("card-hidden")) {
    flipCardUp(cardElement);
  } else {
    flipCardDown(cardElement);
  }
  updateScoreboard();
  if (flippedCards.length === 8) {
    endGame();
  }
  selectedRows.push(row);
  currentRowIndex++;
}

//Flip cards face up
function flipCardUp(cardElement) {
  cardElement.classList.add("card-flipped"); // Add the card-flipped class when face up
  cardElement.textContent = cardElement.dataset.value;
  totalScore += parseInt(cardElement.dataset.points);
  const suit = cardElement.dataset.value.split("").pop(); // get the suit from the card value
  suitScores[suit] += parseInt(cardElement.dataset.points); // add points to the suit score
  document.getElementById("score-box").textContent = `Total score: ${totalScore}`;
  document.getElementById("♥-score").textContent = `Hearts ♥: ${suitScores["♥"]}`;
  document.getElementById("♠-score").textContent = `Spades ♠: ${suitScores["♠"]}`;
  document.getElementById("♦-score").textContent = `Diamonds ♦: ${suitScores["♦"]}`;
  document.getElementById("♣-score").textContent = `Clubs ♣: ${suitScores["♣"]}`;
  flippedCards = document.querySelectorAll(".card-flipped");
  console.log(`Card flipped: row ${cardElement.parentElement.dataset.row}`);
}

//Flip cards face down
function flipCardDown(cardElement) {
  cardElement.classList.remove("card-flipped"); // Remove the card-flipped class when face down
  cardElement.textContent = "";
  totalScore -= parseInt(cardElement.dataset.points);
  const suit = cardElement.dataset.value.split("").pop(); // get the suit from the card value
  suitScores[suit] -= parseInt(cardElement.dataset.points); // subtract points from the suit score
  document.getElementById("score-box").textContent = `Total score: ${totalScore}`;
  document.getElementById("♥-score").textContent = `Hearts ♥: ${suitScores["♥"]}`;
  document.getElementById("♠-score").textContent = `Spades ♠: ${suitScores["♠"]}`;
  document.getElementById("♦-score").textContent = `Diamonds ♦: ${suitScores["♦"]}`;
  document.getElementById("♣-score").textContent = `Clubs ♣: ${suitScores["♣"]}`;
  flippedCards = document.querySelectorAll(".card-flipped");
}

//Function for ending game
function endGame() {
  gameStarted = false;
  const gameNumber = `game-${currentGame}`; // use currentGame to determine the game number
  const gameScore = `Game ${currentGame}: ${totalScore}`.replace('-', ' '); // format game score
  document.getElementById(gameNumber).textContent = gameScore; // set the game score

  if (currentGame === 10) {
    // Display final game message to the user
    const message = "The game is finished!, thank you for playing!";
    const messageBox = document.createElement("div");
    messageBox.className = "message-box";
    messageBox.innerHTML = message;
    document.body.appendChild(messageBox);
  } else {
    // Display message to the user to start next game
    const message = `Game ${currentGame} has ended. Please press the Start Game button to move on to the next game`;
    const messageBox = document.createElement("div");
    messageBox.className = "message-box";
    messageBox.innerHTML = `${message}<div class="button-container"><button id="next-game-btn">Start Next Game</button></div>`;
    document.body.appendChild(messageBox);

    // Wait for user to click button
    const nextGameButton = document.getElementById("next-game-btn");
    nextGameButton.addEventListener("click", () => {
      document.body.removeChild(messageBox); // remove message box
      resetCards(); // reset cards
      startGame(); // start new game
    });
  }
}

// Add click event listener to each card element
cardElements.forEach((cardElement) => {
  cardElement.addEventListener("click", () => {
    flipCard(cardElement);
  });
});

// Attach event listener to start button
const startButton = document.getElementById('start-btn');
startButton.addEventListener('click', startGame);

//Creating and setting reset button
const resetButton = document.getElementById('reset-btn');
resetButton.addEventListener('click', () => {
  // Clear all card values
  cardElements.forEach((cardElement) => {
    cardElement.classList.add("card-hidden");
    cardElement.textContent = "";
    cardElement.dataset.points = 0;
    cardElement.classList.remove("heart", "spade", "diamond", "club"); // Add this line to remove suit-related classes
  });

  // Reset all score values
  totalScore = 0;
  suitScores = {
    "♥": 0,
    "♠": 0,
    "♦": 0,
    "♣": 0
  };
  document.getElementById("score-box").textContent = `Total score: ${totalScore}`;
  document.getElementById("♥-score").textContent = `Hearts ♥: ${suitScores["♥"]}`;
  document.getElementById("♠-score").textContent = `Spades ♠: ${suitScores["♠"]}`;
  document.getElementById("♦-score").textContent = `Diamonds ♦: ${suitScores["♦"]}`;
  document.getElementById("♣-score").textContent = `Clubs ♣: ${suitScores["♣"]}`;

  // Reset start button and gameStarted variable
  startButton.disabled = false;
  resetButton.disabled = true;
  gameStarted = false;
});
