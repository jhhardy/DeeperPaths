// Defining constants and giving the cards values
const cards = [
  "A♥", "2♥", "3♥", "4♥", "5♥", "6♥", "7♥", "8♥", "9♥", "10♥", "J♥", "Q♥", "K♥",
  "A♠", "2♠", "3♠", "4♠", "5♠", "6♠", "7♠", "8♠", "9♠", "10♠", "J♠", "Q♠", "K♠",
  "A♦", "2♦", "3♦", "4♦", "5♦", "6♦", "7♦", "8♦", "9♦", "10♦", "J♦", "Q♦", "K♦",
  "A♣", "2♣", "3♣", "4♣", "5♣", "6♣", "7♣", "8♣", "9♣", "10♣", "J♣", "Q♣", "K♣"
];

//*********************PREPARING GAMEBOARD*********************** */
  // Shuffle the cards using the Fisher-Yates algorithm
  function shuffleDeck() {
    for (let i = cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [cards[i], cards[j]] = [cards[j], cards[i]];
    }
    }

//Converts Unicode symbol into words
function assignCardSuit(cardElement, card) {
  if (card.includes("♥")) {
    cardElement.classList.add("heart");
  } else if (card.includes("♠")) {
    cardElement.classList.add("spade");
  } else if (card.includes("♦")) {
    cardElement.classList.add("diamond");
  } else if (card.includes("♣")) {
    cardElement.classList.add("club");
  }
}

//Develops scoring mechanism
function assignCardPoints(cardElement, card) {
  let points;
  if (card.startsWith("A")) {
    points = 11;
  } else if (card.startsWith("K") || card.startsWith("Q") || card.startsWith("J")) {
    points = 10;
  } else {
    points = parseInt(card);
  }
  cardElement.dataset.points = points;
}

// Assign each card a value and point value based on scoring system
const cardElements = document.querySelectorAll('.card');
function assignCardValue(cardElement, card) {
  cardElement.dataset.value = card;
  cardElement.classList.add("card-invalid");
  assignCardPoints(cardElement, card);
  assignCardSuit(cardElement, card);
}

//Deals out cards and assigns them values
function dealCards() {
  cards.forEach((card, index) => {
    const cardElement = cardElements[index];
    assignCardValue(cardElement, card);
  });
}

//*********************STARTING GAME*********************** */
let currentGame = 0;
function startGame() {
  // If its the first game, suffule the deck, otherwise, leave the card values alone
  if (currentGame === 0) {
    shuffleDeck();
  }
  currentGame++;
  startButton.disabled = true;
  dealCards();
  gameStarted = true;

  // Reset scores for the current game
  suitScores = {
    "♥": 0,
    "♦": 0,
    "♠": 0,
    "♣": 0
  };
}

//*********************GAME LOGIC AND RULES*********************** */
function validateCard(cardElement) {
  const isCardValid = cardElement.classList.contains("card-valid");
  if (isCardValid) {
    console.log("Valid card!");
  } else {
    const message = "Card is not valid";
    const errorBox = document.querySelector(".error-box");
    errorBox.innerHTML = message;
    errorBox.style.opacity = 1;
    setTimeout(() => {
      errorBox.style.opacity = 0;
    }, 2000);
  }
}

//*********************EVENT LISTENERS*********************** */
// Attach event listener to start button
const startButton = document.getElementById('start-btn');
startButton.addEventListener('click', startGame);

// Add click event listener to each card element
cardElements.forEach((cardElement) => {
  cardElement.addEventListener("click", () => {
    validateCard(cardElement);
  });
});